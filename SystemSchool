import java.sql.*;
import java.util.Scanner;
public class SistemaEscolar {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/sistemaescolar", "juliancollant", "pancuca1")) {
            System.out.println("Conexión exitosa a la base de datos");
            boolean continuar = true;
            while (continuar) {
                System.out.println("Menú:");
                System.out.println("1. Mostrar Estudiantes");
                System.out.println("2. mostrar Profesores");
                System.out.println("3. Agregar Estudiantes");
                System.out.println("4. Agregar Profesores");
                System.out.println("5. Eliminar estudiante por nombre");
                System.out.println("6. Despedir profesor");
                System.out.println("7. Salir");
                System.out.println("Seleccione una opción:");

                int opcionMenu = scanner.nextInt();
                scanner.nextLine();

                switch (opcionMenu) {
                    case 1:
                        mostrarEstudiantes(connection);
                        break;
                    case 2:
                        mostrarProfesores(connection);
                        break;
                    case 3:
                        agregarEstudiante(connection, scanner);
                        break;
                    case 4:
                        agregarProfesor(connection, scanner);
                        break;
                    case 5:
                        eliminarEstudiantePorNombre(connection, scanner);
                        break;
                    case 6:
                        despedirProfesores(connection, scanner);
                        break;
                    case 7:
                        continuar = false;
                        break;
                    default:
                        System.out.println("Opción inválida");
                        break;
                }
            }
        } catch (SQLException e) {
            System.out.println("Error al conectar a la base de datos: " + e.getMessage());
        } finally {
            scanner.close();
        }
    }


    public static void mostrarEstudiantes(Connection connection) {
        try {
            String consulta = "SELECT * FROM estudiantes";
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(consulta);

            System.out.println("Listado de Estudiantes:");
            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String nombre = resultSet.getString("nombre");
                String apellido = resultSet.getString("apellido");
                int legajo = resultSet.getInt("legajo");
                int dni = resultSet.getInt("dni");
                int edad = resultSet.getInt("edad");
                int cantMateriasInscripto = resultSet.getInt("cantidad_de_materias_inscripto");
                String profesorFavorito = resultSet.getString("profesor_fav");

                System.out.println("ID: " + id + ", Nombre: " + nombre + ", Apellido: " + apellido +
                        ", Legajo: " + legajo + ", DNI: " + dni + ", Edad: " + edad +
                        ", Materias Inscripto: " + cantMateriasInscripto + ", Profesor Favorito: " + profesorFavorito);
            }

            statement.close();
        } catch (SQLException e) {
            System.out.println("Error al mostrar estudiantes: " + e.getMessage());
        }
    }

    public static void mostrarProfesores(Connection connection) {
        try {
            String consulta = "SELECT * FROM profesores";
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(consulta);

            System.out.println("Listado de Profesores:");
            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String nombre = resultSet.getString("nombre");
                String apellido = resultSet.getString("apellido");
                String materia = resultSet.getString("materia");
                String diasTrabajo = resultSet.getString("dias_trabajo");
                int dni = resultSet.getInt("dni");
                int edad = resultSet.getInt("edad");

                System.out.println("ID: " + id + ", Nombre: " + nombre + ", Apellido: " + apellido +
                        ", Materia: " + materia + ", Días de Trabajo: " + diasTrabajo +
                        ", DNI: " + dni + ", Edad: " + edad);
            }

            statement.close();
        } catch (SQLException e) {
            System.out.println("Error al mostrar profesores: " + e.getMessage());
        }
    }
    public static void agregarEstudiante(Connection connection, Scanner scanner) {
        try {
            System.out.println("Ingrese el nombre del estudiante:");
            String nombre = scanner.nextLine();

            System.out.println("Ingrese el apellido del estudiante:");
            String apellido = scanner.nextLine();

            System.out.println("Ingrese el legajo del estudiante:");
            int legajo = scanner.nextInt();
            scanner.nextLine(); // Limpiar el buffer del Scanner

            System.out.println("Ingrese el DNI del estudiante:");
            int dni = scanner.nextInt();
            scanner.nextLine(); // Limpiar el buffer del Scanner

            System.out.println("Ingrese la edad del estudiante:");
            int edad = scanner.nextInt();
            scanner.nextLine(); // Limpiar el buffer del Scanner

            System.out.println("Ingrese la cantidad de materias inscripto:");
            int cantMateriasInscripto = scanner.nextInt();
            scanner.nextLine(); // Limpiar el buffer del Scanner

            System.out.println("Ingrese el profesor favorito del estudiante:");
            String profesorFavorito = scanner.nextLine();

            // Preparar la consulta SQL para insertar un nuevo estudiante
            String consulta = "INSERT INTO estudiantes (nombre, apellido, legajo, dni, edad, cantidad_de_materias_inscripto, profesor_fav) " +
                    "VALUES (?, ?, ?, ?, ?, ?, ?)";
            PreparedStatement preparedStatement = connection.prepareStatement(consulta);

            // Establecer los valores de los parámetros en la consulta SQL
            preparedStatement.setString(1, nombre);
            preparedStatement.setString(2, apellido);
            preparedStatement.setInt(3, legajo);
            preparedStatement.setInt(4, dni);
            preparedStatement.setInt(5, edad);
            preparedStatement.setInt(6, cantMateriasInscripto);
            preparedStatement.setString(7, profesorFavorito);

            // Ejecutar la consulta para insertar el estudiante
            int filasAfectadas = preparedStatement.executeUpdate();
            if (filasAfectadas > 0) {
                System.out.println("Estudiante agregado correctamente.");
            } else {
                System.out.println("No se pudo agregar el estudiante.");
            }

            preparedStatement.close();
        } catch (SQLException e) {
            System.out.println("Error al agregar estudiante: " + e.getMessage());
        }
    }

    public static void eliminarEstudiantePorNombre(Connection connection, Scanner scanner) {
        try {
            System.out.println("Ingrese el nombre del estudiante que desea eliminar:");
            String nombreEstudiante = scanner.nextLine();

            // Preparar la consulta SQL para eliminar al estudiante por su nombre
            String consulta = "DELETE FROM estudiantes WHERE nombre = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(consulta);

            // Establecer el nombre del estudiante como parámetro en la consulta SQL
            preparedStatement.setString(1, nombreEstudiante);

            // Ejecutar la consulta para eliminar al estudiante
            int filasAfectadas = preparedStatement.executeUpdate();
            if (filasAfectadas > 0) {
                System.out.println("Estudiante eliminado correctamente.");
            } else {
                System.out.println("No se encontró ningún estudiante con ese nombre.");
            }

            preparedStatement.close();
        } catch (SQLException e) {
            System.out.println("Error al eliminar estudiante: " + e.getMessage());
        }
    }

    public static void agregarProfesor(Connection connection, Scanner scanner) {
        try {
            System.out.println("Ingrese el nombre del profesor:");
            String nombre = scanner.nextLine();

            System.out.println("Ingrese el apellido del profesor:");
            String apellido = scanner.nextLine();

            System.out.println("Ingrese la materia que enseña:");
            String materia = scanner.nextLine();

            System.out.println("Ingrese los días de trabajo del profesor:");
            String diasTrabajo = scanner.nextLine();

            System.out.println("Ingrese el DNI del profesor:");
            int dni = scanner.nextInt();
            scanner.nextLine(); // Limpiar el buffer del Scanner

            System.out.println("Ingrese la edad del profesor:");
            int edad = scanner.nextInt();
            scanner.nextLine(); // Limpiar el buffer del Scanner

            // Preparar la consulta SQL para insertar un nuevo profesor
            String consulta = "INSERT INTO profesores (nombre, apellido, materia, dias_trabajo, dni, edad) VALUES (?, ?, ?, ?, ?, ?)";
            PreparedStatement preparedStatement = connection.prepareStatement(consulta);

            // Establecer los valores de los parámetros en la consulta SQL
            preparedStatement.setString(1, nombre);
            preparedStatement.setString(2, apellido);
            preparedStatement.setString(3, materia);
            preparedStatement.setString(4, diasTrabajo);
            preparedStatement.setInt(5, dni);
            preparedStatement.setInt(6, edad);

            // Ejecutar la consulta para insertar al profesor
            int filasAfectadas = preparedStatement.executeUpdate();
            if (filasAfectadas > 0) {
                System.out.println("Profesor agregado correctamente.");
            } else {
                System.out.println("No se pudo agregar al profesor.");
            }

            preparedStatement.close();
        } catch (SQLException e) {
            System.out.println("Error al agregar profesor: " + e.getMessage());
        }
    }
    public static void despedirProfesores(Connection connection, Scanner scanner) {
        try {
            System.out.println("Ingrese el ID del profesor que desea despedir:");
            int idProfesor = scanner.nextInt();
            scanner.nextLine(); // Limpiar el buffer del Scanner

            // Preparar la consulta SQL para despedir al profesor por su ID
            String consulta = "DELETE FROM profesores WHERE id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(consulta);

            // Establecer el ID del profesor como parámetro en la consulta SQL
            preparedStatement.setInt(1, idProfesor);

            // Ejecutar la consulta para despedir al profesor
            int filasAfectadas = preparedStatement.executeUpdate();
            if (filasAfectadas > 0) {
                System.out.println("Profesor despedido correctamente.");
            } else {
                System.out.println("No se encontró ningún profesor con ese ID.");
            }

            preparedStatement.close();
        } catch (SQLException e) {
            System.out.println("Error al despedir profesor: " + e.getMessage());
        }
    }


    }




















public abstract class Persona {
    private String nombre,apellido;
    private int dni,edad;

    public Persona(String nombre, String apellido, int dni, int edad) {

        this.nombre = nombre;
        this.apellido = apellido;
        this.dni = dni;
        this.edad = edad;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getApellido() {
        return apellido;
    }

    public void setApellido(String apellido) {
        this.apellido = apellido;
    }

    public int getDni() {
        return dni;
    }

    public void setDni(int dni) {
        this.dni = dni;
    }

    public int getEdad() {
        return edad;
    }

    public void setEdad(int edad) {
        this.edad = edad;
    }

    public abstract void DecirEnQueSoyBueno();
}



public abstract class Estudiante extends  Persona{
    private String NLegajo,cantMateriasInscripto,profesorFav;
    public Estudiante(String nombre, String apellido, int dni, int edad) {
        super(nombre, apellido, dni, edad);
    }

    public Estudiante(String nombre, String apellido, int dni, int edad, String NLegajo, String cantMateriasInscripto, String profesorFav) {
        super(nombre, apellido, dni, edad);
        this.NLegajo = NLegajo;
        this.cantMateriasInscripto = cantMateriasInscripto;
        this.profesorFav = profesorFav;
    }

    public String getNLegajo() {
        return NLegajo;
    }

    public void setNLegajo(String NLegajo) {
        this.NLegajo = NLegajo;
    }

    public String getCantMateriasInscripto() {
        return cantMateriasInscripto;
    }

    public void setCantMateriasInscripto(String cantMateriasInscripto) {
        this.cantMateriasInscripto = cantMateriasInscripto;
    }

    public String getProfesorFav() {
        return profesorFav;
    }

    public void setProfesorFav(String profesorFav) {
        this.profesorFav = profesorFav;
    }
}






















public abstract class Profesor extends Persona{
private String materia,DiasDeCursado;
    public Profesor(String nombre, String apellido, int dni, int edad) {
        super(nombre, apellido, dni, edad);
    }

    public Profesor(String nombre, String apellido, int dni, int edad, String materia, String diasDeCursado) {
        super(nombre, apellido, dni, edad);
        this.materia = materia;
        DiasDeCursado = diasDeCursado;
    }

    public String getMateria() {
        return materia;
    }

    public void setMateria(String materia) {
        this.materia = materia;
    }

    public String getDiasDeCursado() {
        return DiasDeCursado;
    }

    public void setDiasDeCursado(String diasDeCursado) {
        DiasDeCursado = diasDeCursado;
    }
}






